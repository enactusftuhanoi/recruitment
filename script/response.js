// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyAOP2j0qV0Ge-q2-Y9zo9Qc3eLmgtVOK3k",
  authDomain: "recruitment-enactusftuhanoi.firebaseapp.com",
  projectId: "recruitment-enactusftuhanoi",
  storageBucket: "recruitment-enactusftuhanoi.firebasestorage.app",
  messagingSenderId: "658928769643",
  appId: "1:658928769643:web:ef4e26633b7c41c922ef2e",
  measurementId: "G-BJT7ZPKYE3",
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const auth = firebase.auth(); // <-- Auth instance

// ==== Global State ====
const userEmail = sessionStorage.getItem("email");
let userRole = sessionStorage.getItem("role") || null;
let userDept = sessionStorage.getItem("department") || null;

let applications = [];
let currentApplicationId = null;

if (!userEmail || !userRole) {
  window.location.href = "login.html";
}

// ==== X·ª≠ l√Ω tham s·ªë URL ƒë·ªÉ t·ª± ƒë·ªông m·ªü ·ª©ng vi√™n c·ª• th·ªÉ ====
function getUrlParameter(name) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(name);
}

// H√†m t·ª± ƒë·ªông m·ªü ·ª©ng vi√™n khi c√≥ tham s·ªë ID
function autoOpenApplicationFromUrl() {
  const applicationId = getUrlParameter("id");
  if (applicationId) {
    // T√¨m ·ª©ng vi√™n trong danh s√°ch
    const application = applications.find((app) => app.id === applicationId);
    if (application) {
      // T·ª± ƒë·ªông hi·ªÉn th·ªã chi ti·∫øt ·ª©ng vi√™n
      setTimeout(() => {
        showApplicationDetail(applicationId);
      }, 500); // Delay ƒë·ªÉ ƒë·∫£m b·∫£o trang ƒë√£ load xong
    } else {
      console.warn("Kh√¥ng t√¨m th·∫•y ·ª©ng vi√™n v·ªõi ID:", applicationId);
    }
  }
}

// CH√ö √ù: kh√¥ng g·ªçi loadApplications tr·ª±c ti·∫øp khi load trang.
auth.onAuthStateChanged(async (user) => {
  if (user) {
    try {
      const snap = await db
        .collection("account")
        .where("email", "==", user.email)
        .limit(1)
        .get();

      if (!snap.empty) {
        const doc = snap.docs[0];
        const data = doc.data();

        userRole = data.role || userRole;
        userDept = data.department || userDept;

        // üëâ L·∫•y fullname t·ª´ document ID
        window.currentUserFullname = doc.id;

        // L∆∞u session
        sessionStorage.setItem("role", userRole);
        sessionStorage.setItem("department", userDept);

        // üëâ G·ªçi 2 h√†m sau khi ƒë√£ x√°c ƒë·ªãnh role v√† fullname
        applyRoleUIRules();
        renderUserInfoBox(window.currentUserFullname);
      } else {
        // account kh√¥ng t·ªìn t·∫°i
        await auth.signOut();
        window.location.href = "login.html";
        return;
      }
    } catch (e) {
      console.error("L·ªói khi l·∫•y account:", e);
    }

    // üëâ S·ª¨A L·∫†I: ƒê·ª£i loadApplications ho√†n th√†nh tr∆∞·ªõc khi autoOpen
    await loadApplications();
    autoOpenApplicationFromUrl(); // üëà Gi·ªù applications ƒë√£ c√≥ d·ªØ li·ªáu
  } else {
    window.location.href = "login.html";
  }
});

function renderUserInfoBox(fullname) {
  const box = document.getElementById("user-info-box");
  if (!box) return;

  const email = sessionStorage.getItem("email") || "";
  const role = (sessionStorage.getItem("role") || "").toLowerCase();
  const dept = sessionStorage.getItem("department") || "";

  const name = fullname || email.split("@")[0];

  let roleDisplay = "";
  if (role === "superadmin") {
    roleDisplay = `<i class="fa-solid fa-crown" style="color:#f1c40f; margin-right:6px;"></i>Super Admin`;
  } else if (role === "admin") {
    roleDisplay = `Admin${dept ? " | " + dept : ""}`;
  } else if (role === "member") {
    roleDisplay = `Member${dept ? " | " + dept : ""}`;
  }

  const adminBadge =
    role === "superadmin"
      ? `<a href="accounts.html" class="icon-badge" title="Qu·∫£n tr·ªã">
           <i class="fa-solid fa-shield-halved"></i>
         </a>`
      : `<div class="icon-badge">
           <i class="fa-solid fa-users" title="Th√†nh vi√™n"></i>
         </div>`;

  box.innerHTML = `
    <div class="user-info-header">
      <div class="name">${name}</div>
      ${adminBadge}
    </div>
    <div class="email">${email}</div>
    <div class="user-info-footer">
      <div class="role ${role}">${roleDisplay}</div>
      <div class="logout-badge" id="logout-btn" title="ƒêƒÉng xu·∫•t">
        <i class="fa-solid fa-right-from-bracket"></i>
      </div>
    </div>
  `;
}

function canActOnDepartment(application, departmentType) {
  if (!application) return false;
  if (userRole === "superadmin") return true;
  if (userRole === "admin") {
    const deptCode =
      departmentType === "priority"
        ? application.priority_position
        : application.secondary_position;
    return deptCode === userDept;
  }
  return false;
}

function applyRoleUIRules() {
  // --- N√∫t export ---
  const exportAllBtn = document.getElementById("export-all-btn");
  const exportByCandidateBtn = document.getElementById(
    "export-by-candidate-btn"
  );
  const exportDeptSelect = document.getElementById("export-department");

  if (userRole === "superadmin") {
    if (exportAllBtn) exportAllBtn.style.display = "inline-block";
    if (exportByCandidateBtn)
      exportByCandidateBtn.style.display = "inline-block";
    if (exportDeptSelect) exportDeptSelect.disabled = false;
  } else if (userRole === "admin") {
    if (exportAllBtn) exportAllBtn.style.display = "none";
    if (exportByCandidateBtn)
      exportByCandidateBtn.style.display = "inline-block";
    if (exportDeptSelect) {
      exportDeptSelect.disabled = false;
      Array.from(exportDeptSelect.options).forEach((opt) => {
        opt.disabled = opt.value !== userDept;
      });
      exportDeptSelect.value = userDept;
    }
  } else {
    // member
    if (exportAllBtn) exportAllBtn.style.display = "none";
    if (exportByCandidateBtn) exportByCandidateBtn.style.display = "none";
    if (exportDeptSelect) exportDeptSelect.disabled = true;
  }

  // --- Menu kh√°c (n·∫øu c√≥) ---
  const systemMenu = document.getElementById("system-settings-menu");
  if (systemMenu) {
    systemMenu.style.display = userRole === "superadmin" ? "block" : "none";
  }

  // --- C√°c n√∫t h√†nh ƒë·ªông kh√°c ---
  if (userRole === "member") {
    document
      .querySelectorAll(
        ".action-button, .export-btn, .mark-reviewed-btn, .export-option-btn"
      )
      .forEach((e) => (e.style.display = "none"));
  } else if (userRole === "superadmin") {
    document
      .querySelectorAll(
        ".export-option-btn, .export-btn, .action-button, .mark-reviewed-btn"
      )
      .forEach((e) => (e.style.display = "inline-block"));
  }
}

// H√†m t·∫£i danh s√°ch ·ª©ng vi√™n
async function loadApplications() {
  try {
    let snapshot;

    if (userRole === "superadmin") {
      snapshot = await db
        .collection("applications")
        .orderBy("timestamp", "desc")
        .get();
    } else if (userRole === "admin" || userRole === "member") {
      // Admin + Member ch·ªâ xem ·ª©ng vi√™n thu·ªôc ban c·ªßa m√¨nh
      try {
        snapshot = await db
          .collection("applications")
          .where("all_departments", "array-contains", userDept)
          .orderBy("timestamp", "desc")
          .get();
      } catch (err) {
        console.warn(
          "Kh√¥ng query ƒë∆∞·ª£c b·∫±ng all_departments, fallback filter client-side",
          err
        );
        const allSnap = await db
          .collection("applications")
          .orderBy("timestamp", "desc")
          .get();
        // Fallback: filter theo ban client-side
        applications = [];
        allSnap.forEach((doc) => {
          const data = doc.data();
          if (
            data.priority_position === userDept ||
            data.secondary_position === userDept
          ) {
            applications.push({
              id: doc.id,
              status: data.status || "new",
              ...data,
            });
          }
        });
        renderApplications();
        return;
      }
    }

    applications = [];
    snapshot.forEach((doc) => {
      const data = doc.data();
      applications.push({
        id: doc.id,
        status: data.status || "new",
        ...data,
      });
    });

    renderApplications();
  } catch (error) {
    console.error("Error loading applications:", error);
    Swal.fire(
      "L·ªói",
      "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·ª©ng vi√™n: " + error.message,
      "error"
    );
  }
}

// H√†m hi·ªÉn th·ªã t√™n ban k√®m ti·ªÉu ban (n·∫øu c√≥)
function getDepartmentDisplayText(application, type) {
  const deptCode =
    type === "priority"
      ? application.priority_position
      : application.secondary_position;
  let displayText = getDepartmentName(deptCode);

  // Th√™m ti·ªÉu ban n·∫øu l√† Ban Truy·ªÅn th√¥ng (MD)
  if (deptCode === "MD") {
    const subDepts =
      type === "priority"
        ? application.md_sub_departments
        : application.md_sub_departments_secondary;

    if (subDepts && subDepts.length > 0) {
      displayText += ` (${subDepts.join(", ")})`;
    }
  }

  return displayText;
}

// H√†m hi·ªÉn th·ªã danh s√°ch ·ª©ng vi√™n
function renderApplications() {
  const applicationsList = document.getElementById("applications-list");
  const noApplications = document.getElementById("no-applications");

  if (!applicationsList) {
    console.error("Missing #applications-list element in DOM");
    return;
  }

  // L·ªçc theo b·ªô l·ªçc
  const departmentFilter = document.getElementById("filter-department")?.value;
  const statusFilter = document.getElementById("filter-status")?.value;
  const typeFilter = document.getElementById("filter-type")?.value;
  const searchText =
    document.getElementById("search-input")?.value?.toLowerCase() || "";

  const filteredApplications = applications.filter((app) => {
    // L·ªçc theo ban (c·∫£ ∆∞u ti√™n v√† d·ª± b·ªã)
    if (
      departmentFilter &&
      app.priority_position !== departmentFilter &&
      app.secondary_position !== departmentFilter
    ) {
      return false;
    }

    // L·ªçc theo tr·∫°ng th√°i (d√πng tr·∫°ng th√°i t·ªïng)
    if (statusFilter && computeOverallStatus(app) !== statusFilter)
      return false;

    // L·ªçc theo h√¨nh th·ª©c
    if (typeFilter && app.application_type !== typeFilter) return false;

    // L·ªçc theo t√¨m ki·∫øm
    if (
      searchText &&
      !(
        (app.fullname || "").toLowerCase().includes(searchText) ||
        (app.email || "").toLowerCase().includes(searchText) ||
        (app.phone || "").toLowerCase().includes(searchText)
      )
    )
      return false;

    return true;
  });

  // Clear list (kh√¥ng x√≥a #no-applications v√¨ n√≥ ·ªü ngo√†i)
  applicationsList.innerHTML = "";

  if (filteredApplications.length === 0) {
    if (noApplications) noApplications.style.display = "block";
    return;
  } else {
    if (noApplications) noApplications.style.display = "none";
  }

  filteredApplications.forEach((app) => {
    const appCard = document.createElement("div");
    appCard.className = "application-card";
    appCard.onclick = () => showApplicationDetail(app.id);

    const appDate = app.timestamp
      ? app.timestamp.toDate
        ? app.timestamp.toDate()
        : new Date(app.timestamp)
      : new Date();
    const formattedDate = appDate.toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });

    const overallStatus = computeOverallStatus(app);
    const statusInfo = getStatusInfo(overallStatus);

    // Hi·ªÉn th·ªã c·∫£ ban ∆∞u ti√™n v√† d·ª± b·ªã (n·∫øu c√≥) c√πng ti·ªÉu ban
    let departmentInfo = getDepartmentDisplayText(app, "priority");
    if (app.secondary_position && app.secondary_position !== "None") {
      departmentInfo += ` / ${getDepartmentDisplayText(app, "secondary")}`;
    }

    appCard.innerHTML = `
            <div class="application-card-header">
                <div class="applicant-name">${
                  app.fullname || "Ch∆∞a c√≥ t√™n"
                }</div>
                <div class="application-date">${formattedDate}</div>
            </div>
            <div class="application-details">
                <div class="detail-item">
                    <span class="detail-label">Email</span>
                    <span class="detail-value">${
                      app.email || "Ch∆∞a cung c·∫•p"
                    }</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">S·ªë ƒëi·ªán tho·∫°i</span>
                    <span class="detail-value">${
                      app.phone || "Ch∆∞a cung c·∫•p"
                    }</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Ban ·ª©ng tuy·ªÉn</span>
                    <span class="detail-value">${departmentInfo}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Tr·∫°ng th√°i</span>
                    <span class="application-status ${statusInfo.class}">${
      statusInfo.text
    }</span>
                </div>
            </div>
        `;
    applicationsList.appendChild(appCard);
  });
}

// H√†m l·∫•y th√¥ng tin tr·∫°ng th√°i
function getStatusInfo(status) {
  switch (status) {
    case "reviewed":
      return { class: "status-reviewed", text: "ƒê√£ xem" };
    case "accepted":
      return { class: "status-accepted", text: "Ch·∫•p nh·∫≠n" };
    case "rejected":
      return { class: "status-rejected", text: "T·ª´ ch·ªëi" };
    default:
      return { class: "status-new", text: "M·ªõi" };
  }
}

// H√†m ƒë√°nh d·∫•u ·ª©ng vi√™n ƒë√£ xem
async function markAsReviewed() {
  if (!currentApplicationId) return;
  const application = applications.find(
    (app) => app.id === currentApplicationId
  );
  if (!application) return;

  // Ch·ªâ superadmin ho·∫∑c admin c·ªßa √≠t nh·∫•t 1 ban c·ªßa ·ª©ng vi√™n m·ªõi mark reviewed
  const canMark =
    userRole === "superadmin" ||
    (userRole === "admin" &&
      (application.priority_position === userDept ||
        application.secondary_position === userDept));
  if (!canMark) {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√°nh d·∫•u ·ª©ng vi√™n n√†y l√† ƒë√£ xem.",
      "error"
    );
    return;
  }

  // ch·ªâ mark khi status l√† 'new'
  if (application.status !== "new") return;

  try {
    // üî• TH√äM try-catch ƒë·ªÉ x·ª≠ l√Ω l·ªói
    await db.collection("applications").doc(currentApplicationId).update({
      status: "reviewed",
      updatedAt: new Date(),
    });

    const appIndex = applications.findIndex(
      (app) => app.id === currentApplicationId
    );
    if (appIndex !== -1) {
      applications[appIndex].status = "reviewed";
    }

    // üî• TH√äM th√¥ng b√°o th√†nh c√¥ng
    Swal.fire("Th√†nh c√¥ng", "ƒê√£ ƒë√°nh d·∫•u ·ª©ng vi√™n l√† ƒë√£ xem", "success");

    renderApplications();
    showApplicationDetail(currentApplicationId);
  } catch (error) {
    // üî• TH√äM x·ª≠ l√Ω l·ªói
    console.error("L·ªói khi ƒë√°nh d·∫•u ƒë√£ xem:", error);
    Swal.fire(
      "L·ªói",
      "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + error.message,
      "error"
    );
  }
}

function canActOnDepartment(application, departmentType) {
  if (!application) return false;
  // Super admin: l√†m g√¨ c≈©ng ƒë∆∞·ª£c
  if (userRole === "superadmin") return true;
  // Admin: ch·ªâ n·∫øu ban ·ª©ng vi√™n tr√πng v·ªõi ban admin
  if (userRole === "admin") {
    const deptCode =
      departmentType === "priority"
        ? application.priority_position
        : application.secondary_position;
    return deptCode === userDept;
  }
  // Member: kh√¥ng c√≥ quy·ªÅn h√†nh ƒë·ªông
  return false;
}

// H√†m hi·ªÉn th·ªã chi ti·∫øt ·ª©ng vi√™n
function showApplicationDetail(appId) {
  const application = applications.find((app) => app.id === appId);
  if (!application) return;

  currentApplicationId = appId;

  document.getElementById("detail-applicant-name").textContent =
    application.fullname || "·ª®ng vi√™n";

  const detailSections = document.getElementById("detail-sections");
  detailSections.innerHTML = "";

  // Th√¥ng tin c√° nh√¢n (lu√¥n hi·ªÉn th·ªã)
  const personalInfoSection = document.createElement("div");
  personalInfoSection.className = "detail-section";

  let personalInfoHTML = `
        <h3><i class="fas fa-user"></i> Th√¥ng tin c√° nh√¢n</h3>
        <div class="application-details">
            <div class="detail-item">
                <span class="detail-label">H·ªç v√† t√™n</span>
                <span class="detail-value">${
                  application.fullname || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Email</span>
                <span class="detail-value">${
                  application.email || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">S·ªë ƒëi·ªán tho·∫°i</span>
                <span class="detail-value">${
                  application.phone || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
    `;

  // Th√™m c√°c tr∆∞·ªùng th√¥ng tin c√° nh√¢n b·ªï sung (n·∫øu c√≥)
  if (application.facebook) {
    personalInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Facebook</span>
                <span class="detail-value">
                    <a href="${application.facebook}" target="_blank" class="facebook-badge">
                        <i class="fab fa-facebook"></i>
                        <span>Facebook</span>
                    </a>
                </span>
            </div>
        `;
  }

  if (application.birthdate) {
    personalInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Ng√†y/th√°ng/nƒÉm sinh</span>
                <span class="detail-value">${
                  application.birthdate || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
        `;
  }

  if (application.gender) {
    personalInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Gi·ªõi t√≠nh</span>
                <span class="detail-value">${
                  application.gender || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
        `;
  }

  if (application.school) {
    personalInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Tr∆∞·ªùng</span>
                <span class="detail-value">${
                  application.school || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
        `;
  }

  if (application.major) {
    personalInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Chuy√™n ng√†nh</span>
                <span class="detail-value">${
                  application.major || "Ch∆∞a cung c·∫•p"
                }</span>
            </div>
        `;
  }

  personalInfoSection.innerHTML = personalInfoHTML;
  detailSections.appendChild(personalInfoSection);
  personalInfoHTML += `</div>`;

  // Th√¥ng tin ·ª©ng tuy·ªÉn
  const applicationInfoSection = document.createElement("div");
  applicationInfoSection.className = "detail-section";

  // Th√¥ng tin ·ª©ng tuy·ªÉn - C·∫¨P NH·∫¨T PHI√äN B·∫¢N ƒê·∫¶Y ƒê·ª¶
  let applicationInfoHTML = `
        <h3><i class="fas fa-briefcase"></i> Th√¥ng tin ·ª©ng tuy·ªÉn</h3>
        <div class="application-details">
            <div class="detail-item">
                <span class="detail-label">H√¨nh th·ª©c ·ª©ng tuy·ªÉn</span>
                <span class="detail-value">${
                  application.application_type === "form"
                    ? "ƒêi·ªÅn ƒë∆°n"
                    : "Ph·ªèng v·∫•n"
                }</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Ban ∆∞u ti√™n</span>
                <span class="detail-value">${getDepartmentDisplayText(
                  application,
                  "priority"
                )}</span>
            </div>
    `;

  // Hi·ªÉn th·ªã ban d·ª± b·ªã n·∫øu c√≥
  if (
    application.secondary_position &&
    application.secondary_position !== "None"
  ) {
    applicationInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Ban d·ª± b·ªã</span>
                <span class="detail-value">${getDepartmentDisplayText(
                  application,
                  "secondary"
                )}</span>
            </div>
        `;
  }

  // HI·ªÇN TH·ªä TR·∫†NG TH√ÅI CHO C·∫¢ HAI H√åNH TH·ª®C
  applicationInfoHTML += `
        <div class="detail-item">
            <span class="detail-label">Tr·∫°ng th√°i t·ªïng</span>
            <span class="detail-value">
                <span class="status-indicator ${
                  getStatusInfo(computeOverallStatus(application)).class
                }">
                    ${getStatusInfo(computeOverallStatus(application)).text}
                </span>
            </span>
        </div>
    `;

  // Hi·ªÉn th·ªã tr·∫°ng th√°i t·ª´ng nguy·ªán v·ªçng n·∫øu ·ª©ng vi√™n c√≥ 2 nguy·ªán v·ªçng
  if (
    application.secondary_position &&
    application.secondary_position !== "None"
  ) {
    const priorityStatus = application.priorityRejected
      ? '<span style="color: var(--error);">ƒê√£ t·ª´ ch·ªëi</span>'
      : application.priorityAccepted
      ? '<span style="color: var(--success);">ƒê√£ ch·∫•p nh·∫≠n</span>'
      : "Ch∆∞a ƒë√°nh gi√°";

    const secondaryStatus = application.secondaryRejected
      ? '<span style="color: var(--error);">ƒê√£ t·ª´ ch·ªëi</span>'
      : application.secondaryAccepted
      ? '<span style="color: var(--success);">ƒê√£ ch·∫•p nh·∫≠n</span>'
      : "Ch∆∞a ƒë√°nh gi√°";

    applicationInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Tr·∫°ng th√°i nguy·ªán v·ªçng ∆∞u ti√™n</span>
                <span class="detail-value">${priorityStatus}</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Tr·∫°ng th√°i nguy·ªán v·ªçng d·ª± b·ªã</span>
                <span class="detail-value">${secondaryStatus}</span>
            </div>
        `;
  }

  // X√°c ƒë·ªãnh ban ƒë∆∞·ª£c ch·∫•p nh·∫≠n
  let acceptedText = getAcceptedDepartments(application) || "Kh√¥ng c√≥";
  applicationInfoHTML += `
        <div class="detail-item">
            <span class="detail-label">Ban ƒë∆∞·ª£c ch·∫•p nh·∫≠n</span>
            <span class="detail-value" style="color: var(--success); font-weight: bold;">
                ${acceptedText}
            </span>
        </div>
    `;

  // Hi·ªÉn th·ªã l√Ω do t·ª´ ch·ªëi (n·∫øu c√≥)
  if (application.rejectionReason) {
    applicationInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">L√Ω do t·ª´ ch·ªëi</span>
                <span class="detail-value" style="color: var(--error);">${application.rejectionReason}</span>
            </div>
        `;
  }

  // Hi·ªÉn th·ªã ghi ch√∫ (n·∫øu c√≥)
  if (application.note) {
    applicationInfoHTML += `
            <div class="detail-item">
                <span class="detail-label">Ghi ch√∫</span>
                <span class="detail-value">${application.note}</span>
            </div>
        `;
  }

  applicationInfoHTML += `</div>`;
  applicationInfoSection.innerHTML = applicationInfoHTML;
  detailSections.appendChild(applicationInfoSection);

  // X·ª¨ L√ù THEO H√åNH TH·ª®C ·ª®NG TUY·ªÇN
  if (application.application_type === "form") {
    // HI·ªÇN TH·ªä C√ÇU TR·∫¢ L·ªúI CHO ·ª®NG VI√äN ƒêI·ªÄN ƒê∆†N
    // C√¢u tr·∫£ l·ªùi chung
    const hasGeneralAnswers = generalQuestions.some(
      (q) => application[`general_${q.id}`]
    );
    if (hasGeneralAnswers) {
      const generalAnswersSection = document.createElement("div");
      generalAnswersSection.className = "detail-section";
      generalAnswersSection.innerHTML =
        '<h3><i class="fas fa-comments"></i> C√¢u tr·∫£ l·ªùi chung</h3>';

      generalQuestions.forEach((q) => {
        const answer = application[`general_${q.id}`] || "Ch∆∞a tr·∫£ l·ªùi";
        const questionItem = document.createElement("div");
        questionItem.className = "question-item";

        // render text c√¢u h·ªèi
        let html = `<div class="question-text">${q.question}</div>`;

        // render media n·∫øu c√≥
        if (q.media) {
          if (q.media.type === "image") {
            html += `<div class="question-media">
                                    <img src="${q.media.url}" alt="${
              q.media.alt || ""
            }" class="question-img">
                                </div>`;
          } else if (q.media.type === "video") {
            html += `<div class="question-media">
                                    <video src="${q.media.url}" controls class="question-video"></video>
                                </div>`;
          }
        }

        // render c√¢u tr·∫£ l·ªùi
        html += `<div class="answer-text">${answer}</div>`;

        questionItem.innerHTML = html;
        generalAnswersSection.appendChild(questionItem);
      });

      detailSections.appendChild(generalAnswersSection);
    }

    // C√¢u tr·∫£ l·ªùi theo ban ∆∞u ti√™n
    if (application.priority_position) {
      const priorityAnswersSection = document.createElement("div");
      priorityAnswersSection.className = "detail-section";

      let priorityTitle = `<h3><i class="fas fa-star"></i> C√¢u tr·∫£ l·ªùi cho ${getDepartmentName(
        application.priority_position
      )} (∆Øu ti√™n)</h3>`;
      if (application.priorityRejected) {
        priorityTitle = `<h3><i class="fas fa-star" style="color: var(--error);"></i> C√¢u tr·∫£ l·ªùi cho ${getDepartmentName(
          application.priority_position
        )} (∆Øu ti√™n - ƒê√£ t·ª´ ch·ªëi)</h3>`;
      } else if (
        application.acceptedDepartment === application.priority_position
      ) {
        priorityTitle = `<h3><i class="fas fa-star" style="color: var(--success);"></i> C√¢u tr·∫£ l·ªùi cho ${getDepartmentName(
          application.priority_position
        )} (∆Øu ti√™n - ƒê√£ ch·∫•p nh·∫≠n)</h3>`;
      }
      priorityAnswersSection.innerHTML = priorityTitle;

      renderBanSpecificAnswers(application, "priority", priorityAnswersSection);

      // N√∫t h√†nh ƒë·ªông ch·ªâ d√†nh cho ·ª©ng vi√™n ƒëi·ªÅn ƒë∆°n
      if (canActOnDepartment(application, "priority")) {
        const priorityActions = document.createElement("div");
        priorityActions.className = "action-buttons";
        priorityActions.innerHTML = `
                    <button class="action-button btn-accept" onclick="acceptDepartment('priority')">
                    <i class="fas fa-check"></i> Ch·∫•p nh·∫≠n ban ∆∞u ti√™n
                    </button>
                    <button class="action-button btn-reject" onclick="rejectDepartment('priority')">
                    <i class="fas fa-times"></i> T·ª´ ch·ªëi ban ∆∞u ti√™n
                    </button>
                `;
        priorityAnswersSection.appendChild(priorityActions);
      }

      detailSections.appendChild(priorityAnswersSection);
    }

    // C√¢u tr·∫£ l·ªùi theo ban d·ª± b·ªã
    if (
      application.secondary_position &&
      application.secondary_position !== "None"
    ) {
      const secondaryAnswersSection = document.createElement("div");
      secondaryAnswersSection.className = "detail-section";

      let secondaryTitle = `<h3><i class="fas fa-clock"></i> C√¢u tr·∫£ l·ªùi cho ${getDepartmentName(
        application.secondary_position
      )} (D·ª± b·ªã)</h3>`;
      if (application.acceptedDepartment === application.secondary_position) {
        secondaryTitle = `<h3><i class="fas fa-clock" style="color: var(--success);"></i> C√¢u tr·∫£ l·ªùi cho ${getDepartmentName(
          application.secondary_position
        )} (D·ª± b·ªã - ƒê√£ ch·∫•p nh·∫≠n)</h3>`;
      } else if (application.secondaryRejected) {
        secondaryTitle = `<h3><i class="fas fa-clock" style="color: var(--error);"></i> C√¢u tr·∫£ l·ªùi cho ${getDepartmentName(
          application.secondary_position
        )} (D·ª± b·ªã - ƒê√£ t·ª´ ch·ªëi)</h3>`;
      }
      secondaryAnswersSection.innerHTML = secondaryTitle;

      renderBanSpecificAnswers(
        application,
        "secondary",
        secondaryAnswersSection
      );

      // N√∫t h√†nh ƒë·ªông ch·ªâ d√†nh cho ·ª©ng vi√™n ƒëi·ªÅn ƒë∆°n
      if (canActOnDepartment(application, "secondary")) {
        const secondaryActions = document.createElement("div");
        secondaryActions.className = "action-buttons";
        secondaryActions.innerHTML = `
                    <button class="action-button btn-accept" onclick="acceptDepartment('secondary')">
                    <i class="fas fa-check"></i> Ch·∫•p nh·∫≠n ban d·ª± b·ªã
                    </button>
                    <button class="action-button btn-reject" onclick="rejectDepartment('secondary')">
                    <i class="fas fa-times"></i> T·ª´ ch·ªëi ban d·ª± b·ªã
                    </button>
                `;
        secondaryAnswersSection.appendChild(secondaryActions);
      }

      detailSections.appendChild(secondaryAnswersSection);
    }
  } else {
    // HI·ªÇN TH·ªä TH√îNG TIN PH·ªéNG V·∫§N
    const interviewInfoSection = document.createElement("div");
    interviewInfoSection.className = "detail-section";

    let interviewHTML = `
            <h3><i class="fas fa-calendar-alt"></i> Th√¥ng tin ph·ªèng v·∫•n</h3>
            <div class="application-details">
                <div class="detail-item">
                    <span class="detail-label">H√¨nh th·ª©c</span>
                    <span class="detail-value">Ph·ªèng v·∫•n tr·ª±c ti·∫øp</span>
                </div>
        `;

    // HI·ªÇN TH·ªä L·ªäCH PH·ªéNG V·∫§N ƒê√É CH·ªåN
    let hasInterviewData = false;
    interview.forEach((day) => {
      const dayData = application[day.id];
      if (dayData && Array.isArray(dayData) && dayData.length > 0) {
        hasInterviewData = true;
        interviewHTML += `
                    <div class="detail-item">
                        <span class="detail-label">${day.question}</span>
                        <span class="detail-value">${dayData.join(", ")}</span>
                    </div>
                `;
      }
    });

    if (!hasInterviewData) {
      interviewHTML += `
                <div class="detail-item">
                    <span class="detail-label">L·ªãch ƒë√£ ch·ªçn</span>
                    <span class="detail-value" style="color: var(--error);">Ch∆∞a ch·ªçn l·ªãch ph·ªèng v·∫•n</span>
                </div>
            `;
    }

    interviewHTML += `</div>`;
    interviewInfoSection.innerHTML = interviewHTML;
    detailSections.appendChild(interviewInfoSection);

    // HI·ªÇN TH·ªä ƒê√ÅNH GI√Å PH·ªéNG V·∫§N CHO C·∫¢ 2 BAN N·∫æU C√ì
    if (application.interview_notes || application.interview_result) {
      const interviewEvaluationSection = document.createElement("div");
      interviewEvaluationSection.className = "detail-section";

      let evaluationHTML = `
                <h3><i class="fas fa-clipboard-check"></i> ƒê√°nh gi√° ph·ªèng v·∫•n</h3>
                <div class="application-details">
            `;

      if (application.interview_result) {
        const resultText =
          application.interview_result === "accepted"
            ? '<span style="color: var(--success);">ƒê·∫≠u</span>'
            : '<span style="color: var(--error);">Tr∆∞·ª£t</span>';

        evaluationHTML += `
                    <div class="detail-item">
                        <span class="detail-label">K·∫øt qu·∫£ chung</span>
                        <span class="detail-value">${resultText}</span>
                    </div>
                `;
      }

      // HI·ªÇN TH·ªä ƒê√ÅNH GI√Å THEO T·ª™NG BAN N·∫æU C√ì
      if (application.priority_interview_notes) {
        evaluationHTML += `
                    <div class="detail-item">
                        <span class="detail-label">ƒê√°nh gi√° ${getDepartmentName(
                          application.priority_position
                        )} (∆Øu ti√™n)</span>
                        <span class="detail-value">${
                          application.priority_interview_notes
                        }</span>
                    </div>
                `;
      }

      if (
        application.secondary_interview_notes &&
        application.secondary_position !== "None"
      ) {
        evaluationHTML += `
                    <div class="detail-item">
                        <span class="detail-label">ƒê√°nh gi√° ${getDepartmentName(
                          application.secondary_position
                        )} (D·ª± b·ªã)</span>
                        <span class="detail-value">${
                          application.secondary_interview_notes
                        }</span>
                    </div>
                `;
      }

      // HI·ªÇN TH·ªä GHI CH√ö CHUNG N·∫æU C√ì
      if (application.interview_notes) {
        evaluationHTML += `
                    <div class="detail-item">
                        <span class="detail-label">Ghi ch√∫ chung</span>
                        <span class="detail-value">${application.interview_notes}</span>
                    </div>
                `;
      }

      if (application.interview_evaluated_by) {
        evaluationHTML += `
                    <div class="detail-item">
                        <span class="detail-label">Ng∆∞·ªùi ƒë√°nh gi√°</span>
                        <span class="detail-value">${application.interview_evaluated_by}</span>
                    </div>
                `;
      }

      if (application.interview_evaluated_at) {
        const evalDate = application.interview_evaluated_at.toDate
          ? application.interview_evaluated_at.toDate()
          : new Date(application.interview_evaluated_at);

        evaluationHTML += `
                    <div class="detail-item">
                        <span class="detail-label">Th·ªùi gian ƒë√°nh gi√°</span>
                        <span class="detail-value">${evalDate.toLocaleDateString(
                          "vi-VN"
                        )} ${evalDate.toLocaleTimeString("vi-VN")}</span>
                    </div>
                `;
      }

      evaluationHTML += `</div>`;
      interviewEvaluationSection.innerHTML = evaluationHTML;
      detailSections.appendChild(interviewEvaluationSection);
    }

    // TH√äM N√öT ƒê√ÅNH GI√Å PH·ªéNG V·∫§N CHO ADMIN - PH√ÇN THEO T·ª™NG BAN
    if (
      canActOnDepartment(application, "priority") ||
      canActOnDepartment(application, "secondary")
    ) {
      const interviewActions = document.createElement("div");
      interviewActions.className = "action-buttons";

      let actionsHTML = "";

      // N√∫t cho ban ∆∞u ti√™n
      if (canActOnDepartment(application, "priority")) {
        const priorityStatus = application.priorityAccepted
          ? '<span style="color: var(--success); margin-left: 8px;">(ƒê√£ ƒë·∫≠u)</span>'
          : application.priorityRejected
          ? '<span style="color: var(--error); margin-left: 8px;">(ƒê√£ tr∆∞·ª£t)</span>'
          : '<span style="color: var(--warning); margin-left: 8px;">(Ch∆∞a ƒë√°nh gi√°)</span>';

        actionsHTML += `
                    <div style="margin-bottom: 10px;">
                        <div style="font-weight: bold; margin-bottom: 5px;">${getDepartmentName(
                          application.priority_position
                        )} (∆Øu ti√™n) ${priorityStatus}</div>
                        <button class="action-button btn-accept" onclick="evaluateInterview('accepted', 'priority')">
                            <i class="fas fa-check"></i> ƒê·∫≠u ban ∆∞u ti√™n
                        </button>
                        <button class="action-button btn-reject" onclick="evaluateInterview('rejected', 'priority')">
                            <i class="fas fa-times"></i> Tr∆∞·ª£t ban ∆∞u ti√™n
                        </button>
                    </div>
                `;
      }

      // N√∫t cho ban d·ª± b·ªã (n·∫øu c√≥)
      if (
        application.secondary_position &&
        application.secondary_position !== "None" &&
        canActOnDepartment(application, "secondary")
      ) {
        const secondaryStatus = application.secondaryAccepted
          ? '<span style="color: var(--success); margin-left: 8px;">(ƒê√£ ƒë·∫≠u)</span>'
          : application.secondaryRejected
          ? '<span style="color: var(--error); margin-left: 8px;">(ƒê√£ tr∆∞·ª£t)</span>'
          : '<span style="color: var(--warning); margin-left: 8px;">(Ch∆∞a ƒë√°nh gi√°)</span>';

        actionsHTML += `
                    <div style="margin-bottom: 10px;">
                        <div style="font-weight: bold; margin-bottom: 5px;">${getDepartmentName(
                          application.secondary_position
                        )} (D·ª± b·ªã) ${secondaryStatus}</div>
                        <button class="action-button btn-accept" onclick="evaluateInterview('accepted', 'secondary')">
                            <i class="fas fa-check"></i> ƒê·∫≠u ban d·ª± b·ªã
                        </button>
                        <button class="action-button btn-reject" onclick="evaluateInterview('rejected', 'secondary')">
                            <i class="fas fa-times"></i> Tr∆∞·ª£t ban d·ª± b·ªã
                        </button>
                    </div>
                `;
      }

      actionsHTML += `
                <button class="action-button btn-notes" onclick="addInterviewNotes()" style="margin-top: 10px;">
                    <i class="fas fa-edit"></i> Th√™m ghi ch√∫ chung
                </button>
            `;

      interviewActions.innerHTML = actionsHTML;
      detailSections.appendChild(interviewActions);
    }
  }

  // Hi·ªÉn th·ªã view chi ti·∫øt
  document.getElementById("applications-list").style.display = "none";
  document.getElementById("application-detail").style.display = "block";
}

// Th√™m ghi ch√∫ ph·ªèng v·∫•n
async function addInterviewNotes() {
  if (!currentApplicationId) return;

  const application = applications.find(
    (app) => app.id === currentApplicationId
  );
  if (!application || application.application_type !== "interview") return;

  const { value: notes } = await Swal.fire({
    title: "Th√™m ghi ch√∫ ph·ªèng v·∫•n",
    input: "textarea",
    inputLabel: "Ghi ch√∫",
    inputValue: application.interview_notes || "",
    inputPlaceholder: "Nh·∫≠p ghi ch√∫ v·ªÅ bu·ªïi ph·ªèng v·∫•n...",
    showCancelButton: true,
    confirmButtonText: "L∆∞u",
    cancelButtonText: "H·ªßy",
  });

  if (notes !== undefined) {
    try {
      await db.collection("applications").doc(currentApplicationId).update({
        interview_notes: notes,
        interview_updated_at: new Date(),
      });

      // C·∫≠p nh·∫≠t local data
      const appIndex = applications.findIndex(
        (app) => app.id === currentApplicationId
      );
      if (appIndex !== -1) {
        applications[appIndex].interview_notes = notes;
        applications[appIndex].interview_updated_at = new Date();
      }

      Swal.fire("Th√†nh c√¥ng", "ƒê√£ l∆∞u ghi ch√∫ ph·ªèng v·∫•n", "success");
      showApplicationDetail(currentApplicationId);
    } catch (error) {
      console.error("Error saving interview notes:", error);
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ l∆∞u ghi ch√∫", "error");
    }
  }
}

// ƒê√°nh gi√° k·∫øt qu·∫£ ph·ªèng v·∫•n CHO T·ª™NG BAN - FIXED
async function evaluateInterview(result, departmentType = null) {
  if (!currentApplicationId) return;

  const application = applications.find(
    (app) => app.id === currentApplicationId
  );
  if (!application || application.application_type !== "interview") return;

  // Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc
  let targetDepartment = departmentType;

  // N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh departmentType, h·ªèi user mu·ªën ƒë√°nh gi√° ban n√†o
  if (!targetDepartment) {
    const departments = [];
    if (
      application.priority_position &&
      canActOnDepartment(application, "priority")
    ) {
      departments.push({
        value: "priority",
        text: `${getDepartmentName(application.priority_position)} (∆Øu ti√™n)`,
      });
    }
    if (
      application.secondary_position &&
      application.secondary_position !== "None" &&
      canActOnDepartment(application, "secondary")
    ) {
      departments.push({
        value: "secondary",
        text: `${getDepartmentName(application.secondary_position)} (D·ª± b·ªã)`,
      });
    }

    if (departments.length === 0) {
      Swal.fire(
        "Kh√¥ng c√≥ quy·ªÅn",
        "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√°nh gi√° ·ª©ng vi√™n n√†y.",
        "error"
      );
      return;
    }

    if (departments.length === 1) {
      targetDepartment = departments[0].value;
    } else {
      const { value: selectedDept } = await Swal.fire({
        title: "Ch·ªçn ban ƒë·ªÉ ƒë√°nh gi√°",
        input: "select",
        inputOptions: departments.reduce((options, dept) => {
          options[dept.value] = dept.text;
          return options;
        }, {}),
        showCancelButton: true,
        confirmButtonText: "Ti·∫øp t·ª•c",
        cancelButtonText: "H·ªßy",
      });

      if (!selectedDept) return;
      targetDepartment = selectedDept;
    }
  }

  // KI·ªÇM TRA QUY·ªÄN L·∫†I SAU KHI ƒê√É X√ÅC ƒê·ªäNH BAN
  if (!canActOnDepartment(application, targetDepartment)) {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√°nh gi√° ·ª©ng vi√™n cho ban n√†y.",
      "error"
    );
    return;
  }

  const { value: notes } = await Swal.fire({
    title:
      result === "accepted"
        ? `ƒê·∫≠u ph·ªèng v·∫•n - ${getDepartmentName(
            application[targetDepartment + "_position"]
          )}`
        : `Tr∆∞·ª£t ph·ªèng v·∫•n - ${getDepartmentName(
            application[targetDepartment + "_position"]
          )}`,
    input: "textarea",
    inputLabel: "Ghi ch√∫ ƒë√°nh gi√°",
    inputPlaceholder: "Nh·∫≠p ƒë√°nh gi√° chi ti·∫øt v·ªÅ ·ª©ng vi√™n...",
    showCancelButton: true,
    confirmButtonText: "X√°c nh·∫≠n",
    cancelButtonText: "H·ªßy",
  });

  if (notes !== undefined) {
    try {
      const updateData = {
        interview_evaluated_at: new Date(),
        interview_evaluated_by: window.currentUserFullname || "Unknown",
      };

      // C·∫≠p nh·∫≠t ghi ch√∫ theo ban
      if (targetDepartment === "priority") {
        updateData.priority_interview_notes = notes;
      } else {
        updateData.secondary_interview_notes = notes;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i theo ban
      if (result === "accepted") {
        if (targetDepartment === "priority") {
          updateData.priorityAccepted = true;
          updateData.priorityRejected = false;
        } else {
          updateData.secondaryAccepted = true;
          updateData.secondaryRejected = false;
        }
      } else {
        if (targetDepartment === "priority") {
          updateData.priorityRejected = true;
          updateData.priorityAccepted = false;
          updateData.rejectionReason = notes || "Kh√¥ng ph√π h·ª£p";
        } else {
          updateData.secondaryRejected = true;
          updateData.secondaryAccepted = false;
          updateData.rejectionReason = notes || "Kh√¥ng ph√π h·ª£p";
        }
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªïng d·ª±a tr√™n k·∫øt qu·∫£ c·∫£ 2 ban
      const finalStatus = computeInterviewOverallStatus(
        application,
        updateData
      );
      updateData.status = finalStatus.status;
      updateData.interview_result = finalStatus.interviewResult;

      await db
        .collection("applications")
        .doc(currentApplicationId)
        .update(updateData);

      // C·∫≠p nh·∫≠t local data
      const appIndex = applications.findIndex(
        (app) => app.id === currentApplicationId
      );
      if (appIndex !== -1) {
        Object.assign(applications[appIndex], updateData);
      }

      Swal.fire(
        "Th√†nh c√¥ng",
        `ƒê√£ ${
          result === "accepted" ? "ch·∫•p nh·∫≠n" : "t·ª´ ch·ªëi"
        } ·ª©ng vi√™n cho ${getDepartmentName(
          application[targetDepartment + "_position"]
        )}`,
        "success"
      );
      showApplicationDetail(currentApplicationId);
    } catch (error) {
      console.error("Error evaluating interview:", error);
      Swal.fire("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë√°nh gi√° ph·ªèng v·∫•n", "error");
    }
  }
}

// H√†m t√≠nh tr·∫°ng th√°i t·ªïng cho ·ª©ng vi√™n ph·ªèng v·∫•n - NEW
function computeInterviewOverallStatus(application, updateData = {}) {
  // K·∫øt h·ª£p d·ªØ li·ªáu hi·ªán t·∫°i v√† d·ªØ li·ªáu m·ªõi
  const currentData = { ...application, ...updateData };

  // N·∫øu c√≥ √≠t nh·∫•t m·ªôt ban ƒë∆∞·ª£c ch·∫•p nh·∫≠n -> accepted
  if (currentData.priorityAccepted || currentData.secondaryAccepted) {
    return { status: "accepted", interviewResult: "accepted" };
  }

  // N·∫øu c·∫£ hai ban ƒë·ªÅu b·ªã t·ª´ ch·ªëi -> rejected
  const hasPriority =
    currentData.priority_position && currentData.priority_position !== "None";
  const hasSecondary =
    currentData.secondary_position && currentData.secondary_position !== "None";

  if (hasPriority && hasSecondary) {
    if (currentData.priorityRejected && currentData.secondaryRejected) {
      return { status: "rejected", interviewResult: "rejected" };
    }
  } else if (hasPriority && currentData.priorityRejected) {
    return { status: "rejected", interviewResult: "rejected" };
  } else if (hasSecondary && currentData.secondaryRejected) {
    return { status: "rejected", interviewResult: "rejected" };
  }

  // N·∫øu c√≥ √≠t nh·∫•t m·ªôt ban ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° -> reviewed
  if (
    currentData.priorityAccepted ||
    currentData.priorityRejected ||
    currentData.secondaryAccepted ||
    currentData.secondaryRejected
  ) {
    return { status: "reviewed", interviewResult: "reviewed" };
  }

  // M·∫∑c ƒë·ªãnh l√† new
  return { status: "new", interviewResult: "pending" };
}

// H√†m hi·ªÉn th·ªã l·ªãch ph·ªèng v·∫•n
function renderInterviewSchedule(application, container) {
  if (!application || application.application_type !== "interview") return;

  const interviewSection = document.createElement("div");
  interviewSection.className = "detail-section";

  let interviewHTML = `
        <h3><i class="fas fa-calendar-alt"></i> L·ªãch ph·ªèng v·∫•n ƒë√£ ch·ªçn</h3>
        <div class="application-details">
    `;

  // Duy·ªát qua t·∫•t c·∫£ c√°c ng√†y ph·ªèng v·∫•n c√≥ th·ªÉ
  interview.forEach((day) => {
    const dayData = application[day.id];
    if (dayData && Array.isArray(dayData) && dayData.length > 0) {
      interviewHTML += `
                <div class="detail-item">
                    <span class="detail-label">${day.question}</span>
                    <span class="detail-value">${dayData.join(", ")}</span>
                </div>
            `;
    }
  });

  // N·∫øu kh√¥ng c√≥ l·ªãch n√†o ƒë∆∞·ª£c ch·ªçn
  let hasInterviewData = interview.some(
    (day) =>
      application[day.id] &&
      Array.isArray(application[day.id]) &&
      application[day.id].length > 0
  );

  if (!hasInterviewData) {
    interviewHTML += `
            <div class="detail-item">
                <span class="detail-label">L·ªãch ƒë√£ ch·ªçn</span>
                <span class="detail-value" style="color: var(--error);">Ch∆∞a ch·ªçn l·ªãch ph·ªèng v·∫•n</span>
            </div>
        `;
  }

  interviewHTML += `</div>`;
  interviewSection.innerHTML = interviewHTML;
  container.appendChild(interviewSection);
}
// H√†m hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë·∫∑c th√π c·ªßa t·ª´ng ban
function renderBanSpecificAnswers(application, type, container) {
  const banCode =
    type === "priority"
      ? application.priority_position
      : application.secondary_position;
  if (!banCode || banCode === "None") return;

  if (banCode === "MD") {
    const subDepartments =
      type === "priority"
        ? application.md_sub_departments || []
        : application.md_sub_departments_secondary || [];

    subDepartments.forEach((sub) => {
      const questions = banQuestions["MD"][sub] || [];
      questions.forEach((q) => {
        const answer =
          getAnswer(application, type, q.id, sub) || "Ch∆∞a tr·∫£ l·ªùi";
        const questionItem = document.createElement("div");
        questionItem.className = "question-item";
        let html = `<div class="question-text">${q.question}</div>`;
        if (q.media && q.media.type === "image") {
          html += `<div class="question-media"><img src="${q.media.url}" alt="${
            q.media.alt || ""
          }"></div>`;
        }
        html += `<div class="answer-text">${formatAnswer(
          answer,
          q.type
        )}</div>`;
        questionItem.innerHTML = html;
        container.appendChild(questionItem);
      });
    });
    return;
  }

  const questions = banQuestions[banCode] || [];
  questions.forEach((q) => {
    const answer = getAnswer(application, type, q.id) || "Ch∆∞a tr·∫£ l·ªùi";
    const questionItem = document.createElement("div");
    questionItem.className = "question-item";
    questionItem.innerHTML = `
            <div class="question-text">${q.question}</div>
            <div class="answer-text">${formatAnswer(answer, q.type)}</div>
        `;
    container.appendChild(questionItem);
  });
}

// H√†m ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi
function formatAnswer(answer, type) {
  if (Array.isArray(answer)) {
    return answer.join(", ");
  }

  return answer;
}

// ·∫®n view chi ti·∫øt
function hideDetailView() {
  document.getElementById("applications-list").style.display = "block";
  document.getElementById("application-detail").style.display = "none";
  currentApplicationId = null;
}

// Ch·∫•p nh·∫≠n t·ª´ng ban ri√™ng bi·ªát
async function acceptDepartment(departmentType) {
  if (!currentApplicationId) return;

  const application = applications.find(
    (app) => app.id === currentApplicationId
  );
  if (!application) return;

  // üëâ Check quy·ªÅn
  if (!canActOnDepartment(application, departmentType)) {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·∫•p nh·∫≠n ·ª©ng vi√™n cho ban n√†y.",
      "error"
    );
    return;
  }

  const confirmResult = await Swal.fire({
    title: "X√°c nh·∫≠n",
    text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën CH·∫§P NH·∫¨N ·ª©ng vi√™n n√†y cho ban ${
      departmentType === "priority" ? "∆∞u ti√™n" : "d·ª± b·ªã"
    }?`,
    icon: "question",
    showCancelButton: true,
    confirmButtonText: "C√≥, ch·∫•p nh·∫≠n",
    cancelButtonText: "H·ªßy",
  });

  if (!confirmResult.isConfirmed) return;

  try {
    const updateData = {};
    if (departmentType === "priority") {
      updateData.priorityAccepted = true;
      updateData.priorityRejected = false;
      // üü¢ X√ìA: Kh√¥ng t·ª± ƒë·ªông h·ªßy ban d·ª± b·ªã
      // ·ª®ng vi√™n c√≥ th·ªÉ ƒë∆∞·ª£c accept c·∫£ 2 ban
    } else {
      updateData.secondaryAccepted = true;
      updateData.secondaryRejected = false;
      // üü¢ X√ìA: Kh√¥ng t·ª± ƒë·ªông h·ªßy ban ∆∞u ti√™n
      // ·ª®ng vi√™n c√≥ th·ªÉ ƒë∆∞·ª£c accept c·∫£ 2 ban
    }

    await db
      .collection("applications")
      .doc(currentApplicationId)
      .update(updateData);

    Swal.fire("Th√†nh c√¥ng", "·ª®ng vi√™n ƒë√£ ƒë∆∞·ª£c CH·∫§P NH·∫¨N.", "success");

    // üëâ Load l·∫°i danh s√°ch v√† sau ƒë√≥ m·ªü l·∫°i detail
    await loadApplications();
    showApplicationDetail(currentApplicationId);
  } catch (err) {
    console.error(err);
    Swal.fire("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + err.message, "error");
  }
}

// T·ª´ ch·ªëi t·ª´ng ban ri√™ng bi·ªát
async function rejectDepartment(departmentType) {
  if (!currentApplicationId) return;

  const application = applications.find(
    (app) => app.id === currentApplicationId
  );
  if (!application) return;

  // üëâ Check quy·ªÅn
  if (!canActOnDepartment(application, departmentType)) {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi ·ª©ng vi√™n cho ban n√†y.",
      "error"
    );
    return;
  }

  const { value: reason } = await Swal.fire({
    title: "Nh·∫≠p l√Ω do t·ª´ ch·ªëi",
    input: "text",
    inputPlaceholder: "V√≠ d·ª•: Kh√¥ng ph√π h·ª£p v·ªõi ban",
    showCancelButton: true,
    confirmButtonText: "T·ª´ ch·ªëi",
    cancelButtonText: "H·ªßy",
  });

  try {
    const updateData = {
      rejectionReason: reason || "Kh√¥ng c√≥ l√Ω do",
    };

    if (departmentType === "priority") {
      updateData.priorityRejected = true;
      updateData.priorityAccepted = false;
    } else {
      updateData.secondaryRejected = true;
      updateData.secondaryAccepted = false;
    }

    await db
      .collection("applications")
      .doc(currentApplicationId)
      .update(updateData);

    Swal.fire("Th√†nh c√¥ng", "·ª®ng vi√™n ƒë√£ b·ªã T·ª™ CH·ªêI.", "success");

    // üëâ Load l·∫°i danh s√°ch v√† sau ƒë√≥ m·ªü l·∫°i detail
    await loadApplications();
    showApplicationDetail(currentApplicationId);
  } catch (err) {
    console.error(err);
    Swal.fire("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + err.message, "error");
  }
}

function getAcceptedDepartments(app) {
  const accepted = [];
  if (app.priorityAccepted) {
    accepted.push(getDepartmentName(app.priority_position) + " (∆Øu ti√™n)");
  }
  if (app.secondaryAccepted) {
    accepted.push(getDepartmentName(app.secondary_position) + " (D·ª± b·ªã)");
  }
  return accepted.length > 0 ? accepted.join(" / ") : "Ch∆∞a c√≥";
}

// L·∫•y t√™n ban t·ª´ m√£
function getDepartmentName(code) {
  const departments = {
    MD: "Truy·ªÅn th√¥ng",
    HR: "Nh√¢n s·ª±",
    ER: "ƒê·ªëi ngo·∫°i",
    PD: "D·ª± √°n",
  };

  return departments[code] || code;
}

function computeOverallStatus(app) {
  // üî• S·ª¨A: Ki·ªÉm tra accepted TR∆Ø·ªöC tr∆∞·ªùng status t·ªïng
  if (app.priorityAccepted || app.secondaryAccepted) return "accepted";

  // üî• TH√äM: ∆Øu ti√™n ki·ªÉm tra tr∆∞·ªùng status tr·ª±c ti·∫øp
  if (app.status === "rejected") return "rejected";
  if (app.status === "reviewed") return "reviewed";

  // N·∫øu l√† ·ª©ng vi√™n ph·ªèng v·∫•n
  if (app.application_type === "interview") {
    // N·∫øu c√≥ √≠t nh·∫•t m·ªôt ban ƒë∆∞·ª£c ch·∫•p nh·∫≠n -> accepted
    if (app.priorityAccepted || app.secondaryAccepted) return "accepted";

    // N·∫øu c·∫£ hai ban ƒë·ªÅu b·ªã t·ª´ ch·ªëi -> rejected
    if (
      (app.priorityRejected &&
        (!app.secondary_position || app.secondaryRejected)) ||
      (app.secondaryRejected &&
        (!app.priority_position || app.priorityRejected))
    ) {
      return "rejected";
    }

    // N·∫øu c√≥ √≠t nh·∫•t m·ªôt ban ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° (accept ho·∫∑c reject) -> reviewed
    if (
      app.priorityAccepted ||
      app.priorityRejected ||
      app.secondaryAccepted ||
      app.secondaryRejected
    )
      return "reviewed";

    // M·∫∑c ƒë·ªãnh l√† new
    return "new";
  } else {
    // X·ª≠ l√Ω cho ·ª©ng vi√™n ƒëi·ªÅn ƒë∆°n
    if (app.priorityAccepted || app.secondaryAccepted) return "accepted";
    if (
      (app.priorityRejected &&
        (!app.secondary_position || app.secondaryRejected)) ||
      (app.secondaryRejected &&
        (!app.priority_position || app.priorityRejected))
    ) {
      return "rejected";
    }

    if (app.status === "reviewed") return "reviewed";

    if (app.priorityRejected || app.secondaryRejected) return "reviewed";
    return "new";
  }
}

// Hi·ªÉn th·ªã modal export
function showExportOptions() {
  const exportDeptSelect = document.getElementById("export-department");
  if (exportDeptSelect) {
    if (userRole === "admin") {
      exportDeptSelect.value = userDept; // üëâ admin m·∫∑c ƒë·ªãnh ban c·ªßa m√¨nh
    } else if (userRole === "superadmin") {
      if (!exportDeptSelect.value && exportDeptSelect.options.length > 0) {
        exportDeptSelect.selectedIndex = 0; // üëâ superadmin m·∫∑c ƒë·ªãnh option ƒë·∫ßu
      }
    }
  }

  document.getElementById("export-modal").style.display = "block";
}

// ƒê√≥ng modal export
function closeExportModal() {
  document.getElementById("export-modal").style.display = "none";
  document.getElementById("department-filter").style.display = "none";
}

// X·ª≠ l√Ω export d·ªØ li·ªáu
function exportData(type) {
  switch (type) {
    case "all":
      exportAllData();
      break;
    case "personal":
      exportPersonalInfo();
      break;
    case "results":
      exportResults();
      break;
    case "byDepartment":
      if (userRole === "admin") {
        // t·ª± ƒë·ªông export ban c·ªßa admin
        document.getElementById("export-department").value = userDept;
        document
          .getElementById("export-department")
          .dispatchEvent(new Event("change"));
      } else {
        // superadmin th√¨ cho ch·ªçn
        document.getElementById("department-filter").style.display = "block";
      }
      break;
    case "byCandidate":
      exportByCandidate();
      break;
    case "personalWithResults":
      exportPersonalWithResults();
      break;
    case "interviewSchedule": // TH√äM CASE M·ªöI CHO L·ªäCH PH·ªéNG V·∫§N
      exportInterviewSchedule();
      break;
  }
}

// ƒê·ªãnh d·∫°ng gi√° tr·ªã ng√†y (timestamp ho·∫∑c string) th√†nh dd/MM/yyyy
function formatDateValue(val) {
  if (!val) return "";
  try {
    let d;
    if (val.toDate) {
      d = val.toDate(); // Firestore Timestamp
    } else if (val instanceof Date) {
      d = val;
    } else {
      d = new Date(val);
    }
    if (isNaN(d.getTime())) return val; // n·∫øu parse fail th√¨ tr·∫£ l·∫°i raw
    return d.toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  } catch (e) {
    console.error("formatDateValue error", e, val);
    return val;
  }
}

/* --------------------- START: Unified answer/export block --------------------- */

/**
 * getAnswer: t√¨m c√¢u tr·∫£ l·ªùi v·ªõi nhi·ªÅu fallback pattern
 * prefix: 'general' | 'priority' | 'secondary'
 * qid: id t·ª´ questions.js (v√≠ d·ª• 'platforms', 'content_level', ...)
 * sub: (t√πy) sub-department, v√≠ d·ª• 'Content' cho MD
 */
function extractVoteCounts(app, prefix, sub) {
  const counts = {};
  if (!app) return counts;

  const keys = Object.keys(app || {});
  // heuristic: t·∫•t c·∫£ keys c√≥ ch·ª©a 'vote', 'voter', 'voted', 'voting', 'votes', 'voters'
  const voteKeys = keys.filter((k) =>
    /vote|voter|voted|voting|votes|voters/i.test(k)
  );

  // also check explicit keys related to prefix (e.g. priority_votes, secondary_votes)
  if (prefix) {
    const pref = prefix + "_votes";
    if (keys.includes(pref)) voteKeys.push(pref);
  }

  // helper to add count
  const add = (opt, n = 1) => {
    const key = String(opt ?? "Kh√¥ng x√°c ƒë·ªãnh").trim();
    if (!key) return;
    counts[key] = (counts[key] || 0) + (Number.isFinite(n) ? n : 1);
  };

  for (const k of voteKeys) {
    let v = app[k];
    if (v === undefined || v === null) continue;

    // If sub provided, attempt to look into nested objects e.g. app.priority_votes?.[sub]
    if (sub && typeof v === "object" && v[sub] !== undefined) {
      v = v[sub];
    }

    // Arrays
    if (Array.isArray(v)) {
      if (v.length === 0) continue;
      const first = v[0];
      if (typeof first === "string" || typeof first === "number") {
        v.forEach((item) => add(item));
      } else if (typeof first === "object") {
        // array of vote objects: try fields option/choice/value
        v.forEach((item) => {
          const opt =
            item.option ||
            item.choice ||
            item.value ||
            item.vote ||
            JSON.stringify(item);
          add(opt);
        });
      }
      continue;
    }

    // Objects (map option -> array or option -> count)
    if (typeof v === "object") {
      Object.keys(v).forEach((opt) => {
        const val = v[opt];
        if (Array.isArray(val)) {
          add(opt, val.length);
        } else if (typeof val === "number") {
          add(opt, val);
        } else if (typeof val === "string") {
          // comma separated?
          add(opt, val.split(",").filter(Boolean).length);
        } else {
          // fallback count 1
          add(opt, 1);
        }
      });
      continue;
    }

    // String: maybe JSON or comma-separated list or single option
    if (typeof v === "string") {
      // try parse JSON
      try {
        const parsed = JSON.parse(v);
        if (Array.isArray(parsed)) {
          parsed.forEach((p) => add(p));
          continue;
        } else if (typeof parsed === "object") {
          Object.keys(parsed).forEach((opt) => {
            const val = parsed[opt];
            if (Array.isArray(val)) add(opt, val.length);
            else if (typeof val === "number") add(opt, val);
            else add(opt, 1);
          });
          continue;
        }
      } catch (e) {
        // not JSON
      }
      // comma-separated
      const parts = v
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean);
      if (parts.length > 1) {
        parts.forEach((p) => add(p));
      } else {
        add(v);
      }
      continue;
    }

    // Number or other -> skip
  }

  return counts;
}

function getAnswer(app, prefix, qid, sub) {
  if (!app || !prefix || !qid) return undefined;
  const candidates = [];

  // primary pattern: prefix_qid
  candidates.push(`${prefix}_${qid}`);

  // if sub provided, try prefix_sub_qid and variations
  if (sub) {
    const subLower = String(sub).toLowerCase();
    candidates.push(`${prefix}_${subLower}_${qid}`); // e.g. priority_content_platforms
    if (qid.startsWith(subLower + "_")) {
      candidates.push(`${prefix}_${qid.replace(subLower + "_", "")}`);
    }
  }

  // try direct candidates
  for (const c of candidates) {
    if (Object.prototype.hasOwnProperty.call(app, c)) return app[c];
  }

  // fallback: scan keys that start with prefix_ and match tokens of qid
  const qidParts = qid
    .split("_")
    .filter(Boolean)
    .map((s) => s.toLowerCase());
  const keys = Object.keys(app || {});
  for (const k of keys) {
    const low = k.toLowerCase();
    if (!low.startsWith(prefix + "_")) continue;
    let matched = true;
    for (const part of qidParts) {
      if (!low.includes(part)) {
        matched = false;
        break;
      }
    }
    if (matched) return app[k];
  }

  return undefined;
}
function renderVoteResults(container, counts, title = "K·∫øt qu·∫£ vote") {
  const entries = Object.entries(counts);
  if (!entries || entries.length === 0) {
    const msg = document.createElement("div");
    msg.className = "no-vote-data";
    msg.textContent = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu vote.";
    container.appendChild(msg);
    return;
  }

  // sort desc
  entries.sort((a, b) => b[1] - a[1]);
  const total = entries.reduce((s, e) => s + e[1], 0) || 0;

  const wrapper = document.createElement("div");
  wrapper.className = "vote-results";

  const heading = document.createElement("h4");
  heading.innerHTML = `<i class="fas fa-chart-bar"></i> ${title}`;
  wrapper.appendChild(heading);

  entries.forEach(([opt, cnt]) => {
    const pct = total ? Math.round((cnt / total) * 100) : 0;
    const item = document.createElement("div");
    item.className = "vote-item";

    const meta = document.createElement("div");
    meta.className = "vote-meta";
    meta.innerHTML = `<div class="vote-option">${opt}</div><div class="vote-count">${cnt} phi·∫øu (${pct}%)</div>`;

    const barWrap = document.createElement("div");
    barWrap.className = "vote-bar-wrap";
    const bar = document.createElement("div");
    bar.className = "vote-bar";
    bar.style.width = `${pct}%`;
    barWrap.appendChild(bar);

    item.appendChild(meta);
    item.appendChild(barWrap);
    wrapper.appendChild(item);
  });

  container.appendChild(wrapper);
}

/* Summary-only object for "T·ªïng h·ª£p" sheet (only basic info) */
function normalizeApplicationForSummary(app, index = 0) {
  return {
    STT: index + 1,
    "H·ªç v√† t√™n": app.fullname ?? "",
    Email: app.email ?? "",
    "S·ªë ƒëi·ªán tho·∫°i": app.phone ? `'${app.phone}` : "",
    Facebook: app.facebook ?? "",
    "Ng√†y sinh": app.birthdate ? `'${formatDateValue(app.birthdate)}` : "",
    "Gi·ªõi t√≠nh": app.gender ?? "",
    Tr∆∞·ªùng: app.school ?? "",
    "Chuy√™n ng√†nh": app.major ?? "",
    "H√¨nh th·ª©c ·ª©ng tuy·ªÉn":
      app.application_type === "form" ? "ƒêi·ªÅn ƒë∆°n" : "Ph·ªèng v·∫•n",
    "Ban ∆∞u ti√™n": getDepartmentName(app.priority_position),
    "Ban d·ª± b·ªã":
      app.secondary_position && app.secondary_position !== "None"
        ? getDepartmentName(app.secondary_position)
        : "Kh√¥ng c√≥",
    "Tr·∫°ng th√°i": getStatusInfo(computeOverallStatus(app)).text,
    "Ban ƒë∆∞·ª£c ch·∫•p nh·∫≠n": getAcceptedDepartments(app),
    "Ghi ch√∫": app.note ?? "",
    "L√Ω do t·ª´ ch·ªëi": app.rejectionReason ?? "",
    "Ng√†y ·ª©ng tuy·ªÉn": app.timestamp ? `'${formatDateValue(app.timestamp)}` : "",
  };
}

/* Full normalize: summary + general questions + priority + secondary */
function normalizeApplicationForExport(app, index = 0) {
  const data = normalizeApplicationForSummary(app, index);

  // general questions
  if (
    typeof generalQuestions !== "undefined" &&
    Array.isArray(generalQuestions)
  ) {
    generalQuestions.forEach((q, i) => {
      const val = getAnswer(app, "general", q.id);
      data[`C√¢u h·ªèi chung ${i + 1} - ${q.question}`] = Array.isArray(val)
        ? val.join("; ")
        : val ?? "";
    });
  }

  // priority-specific:
  if (app.priority_position) {
    const code = app.priority_position;
    if (code === "MD") {
      const subs = app.md_sub_departments || [];
      subs.forEach((sub) => {
        const qList = (banQuestions["MD"] && banQuestions["MD"][sub]) || [];
        qList.forEach((q) => {
          const val = getAnswer(app, "priority", q.id, sub);
          data[`∆Øu ti√™n ${sub} - ${q.question}`] = Array.isArray(val)
            ? val.join("; ")
            : val ?? "";
        });
      });
    } else {
      const qList = banQuestions[code] || [];
      qList.forEach((q) => {
        const val = getAnswer(app, "priority", q.id);
        data[`∆Øu ti√™n - ${q.question}`] = Array.isArray(val)
          ? val.join("; ")
          : val ?? "";
      });
    }
  }

  // secondary-specific:
  if (app.secondary_position && app.secondary_position !== "None") {
    const code = app.secondary_position;
    if (code === "MD") {
      const subs = app.md_sub_departments_secondary || [];
      subs.forEach((sub) => {
        const qList = (banQuestions["MD"] && banQuestions["MD"][sub]) || [];
        qList.forEach((q) => {
          const val = getAnswer(app, "secondary", q.id, sub);
          data[`D·ª± b·ªã ${sub} - ${q.question}`] = Array.isArray(val)
            ? val.join("; ")
            : val ?? "";
        });
      });
    } else {
      const qList = banQuestions[code] || [];
      qList.forEach((q) => {
        const val = getAnswer(app, "secondary", q.id);
        data[`D·ª± b·ªã - ${q.question}`] = Array.isArray(val)
          ? val.join("; ")
          : val ?? "";
      });
    }
  }

  return data;
}

/* Format answer for UI */
function formatAnswer(answer, type) {
  if (answer === undefined || answer === null) return "";
  if (Array.isArray(answer)) return answer.join("; ");
  if (typeof answer === "object") {
    try {
      return JSON.stringify(answer);
    } catch (e) {
      return String(answer);
    }
  }
  return String(answer);
}

/* Render ban-specific answers in detail view using getAnswer */
function renderBanSpecificAnswers(application, type, container) {
  const banCode =
    type === "priority"
      ? application.priority_position
      : application.secondary_position;
  if (!banCode || banCode === "None") return;

  // For MD sub-departments
  if (banCode === "MD") {
    const subs =
      type === "priority"
        ? application.md_sub_departments || []
        : application.md_sub_departments_secondary || [];
    subs.forEach((sub) => {
      // first attempt: extract vote data from the application doc for this sub
      const counts = extractVoteCounts(application, type, sub);
      if (Object.keys(counts).length > 0) {
        const section = document.createElement("div");
        section.className = "detail-section";
        section.innerHTML = `<h3><i class="fas fa-star"></i> K·∫øt qu·∫£ vote cho ${getDepartmentName(
          banCode
        )} - ${sub}</h3>`;
        renderVoteResults(section, counts, `K·∫øt qu·∫£ vote ${sub}`);
        container.appendChild(section);
        return; // go next sub
      }

      // fallback: if no vote data stored in doc, try fetching from Firestore 'interview_votes' collection
      if (application.id) {
        // asynchronous fetch, then render if found
        db.collection("interview_votes")
          .doc(application.id)
          .get()
          .then((doc) => {
            if (doc.exists) {
              const data = doc.data();
              // try sub-key first
              const subData =
                data[sub] ||
                data[`${type}_${sub}`] ||
                data[`${sub}_votes`] ||
                data["votes"] ||
                data;
              const countsFromDoc = extractVoteCounts({ tmp: subData }, "tmp");
              if (Object.keys(countsFromDoc).length > 0) {
                const section = document.createElement("div");
                section.className = "detail-section";
                section.innerHTML = `<h3><i class="fas fa-star"></i> K·∫øt qu·∫£ vote cho ${getDepartmentName(
                  banCode
                )} - ${sub}</h3>`;
                renderVoteResults(
                  section,
                  countsFromDoc,
                  `K·∫øt qu·∫£ vote ${sub}`
                );
                container.appendChild(section);
              }
            }
          })
          .catch((err) =>
            console.warn("Kh√¥ng l·∫•y ƒë∆∞·ª£c vote t·ª´ interview_votes:", err)
          );
      }

      // If still no votes => render questions as before
      const qList = (banQuestions["MD"] && banQuestions["MD"][sub]) || [];
      qList.forEach((q) => {
        const val = getAnswer(application, type, q.id, sub);
        const answer =
          val === undefined || val === null
            ? "Ch∆∞a tr·∫£ l·ªùi"
            : formatAnswer(val, q.type);
        const item = document.createElement("div");
        item.className = "question-item";
        let html = `<div class="question-text">${q.question}</div>`;
        if (q.media && q.media.type === "image")
          html += `<div class="question-media"><img src="${q.media.url}" alt="${
            q.media.alt || ""
          }"></div>`;
        html += `<div class="answer-text">${answer}</div>`;
        item.innerHTML = html;
        container.appendChild(item);
      });
    });
    return;
  }

  // Non-MD departments
  // 1) Try to extract votes stored in the application doc for this department/type
  const counts = extractVoteCounts(application, type);
  if (Object.keys(counts).length > 0) {
    const section = document.createElement("div");
    section.className = "detail-section";
    section.innerHTML = `<h3><i class="fas fa-chart-pie"></i> K·∫øt qu·∫£ vote cho ${getDepartmentName(
      banCode
    )}</h3>`;
    renderVoteResults(
      section,
      counts,
      `K·∫øt qu·∫£ vote ${getDepartmentName(banCode)}`
    );
    container.appendChild(section);
    return;
  }

  // 2) Fallback: try Firestore collection interview_votes doc with id = application.id
  if (application.id) {
    db.collection("interview_votes")
      .doc(application.id)
      .get()
      .then((doc) => {
        if (doc.exists) {
          const data = doc.data();
          // prefer type-specific key (priority/secondary) or dept code
          const candidate =
            data[type] || data[banCode] || data["votes"] || data;
          const countsFromDoc = extractVoteCounts({ tmp: candidate }, "tmp");
          if (Object.keys(countsFromDoc).length > 0) {
            const section = document.createElement("div");
            section.className = "detail-section";
            section.innerHTML = `<h3><i class="fas fa-chart-pie"></i> K·∫øt qu·∫£ vote cho ${getDepartmentName(
              banCode
            )}</h3>`;
            renderVoteResults(
              section,
              countsFromDoc,
              `K·∫øt qu·∫£ vote ${getDepartmentName(banCode)}`
            );
            container.appendChild(section);
            return;
          }
        }
        // if no votes found in external doc => fall back to rendering questions as before
        const qList = banQuestions[banCode] || [];
        qList.forEach((q) => {
          const val = getAnswer(application, type, q.id);
          const answer =
            val === undefined || val === null
              ? "Ch∆∞a tr·∫£ l·ªùi"
              : formatAnswer(val, q.type);
          const item = document.createElement("div");
          item.className = "question-item";
          item.innerHTML = `<div class="question-text">${q.question}</div><div class="answer-text">${answer}</div>`;
          container.appendChild(item);
        });
      })
      .catch((err) => {
        console.warn("Kh√¥ng l·∫•y ƒë∆∞·ª£c interview_votes doc:", err);
        // render questions if fetch fails
        const qList = banQuestions[banCode] || [];
        qList.forEach((q) => {
          const val = getAnswer(application, type, q.id);
          const answer =
            val === undefined || val === null
              ? "Ch∆∞a tr·∫£ l·ªùi"
              : formatAnswer(val, q.type);
          const item = document.createElement("div");
          item.className = "question-item";
          item.innerHTML = `<div class="question-text">${q.question}</div><div class="answer-text">${answer}</div>`;
          container.appendChild(item);
        });
      });
    return;
  }

  // 3) If we got here (no app.id, no votes) => render questions as before
  const qList = banQuestions[banCode] || [];
  qList.forEach((q) => {
    const val = getAnswer(application, type, q.id);
    const answer =
      val === undefined || val === null
        ? "Ch∆∞a tr·∫£ l·ªùi"
        : formatAnswer(val, q.type);
    const item = document.createElement("div");
    item.className = "question-item";
    item.innerHTML = `<div class="question-text">${q.question}</div><div class="answer-text">${answer}</div>`;
    container.appendChild(item);
  });
}

function renderGeneralQuestions() {
  const container = document.getElementById("general-questions");
  if (!container) {
    console.warn("renderGeneralQuestions: missing #general-questions element");
    return;
  }
  container.innerHTML = "";

  generalQuestions.forEach((q) => {
    const div = document.createElement("div");
    div.className = "form-group question-item";

    // label
    const label = document.createElement("label");
    label.setAttribute("for", `general_${q.id}`);
    if (q.required) label.classList.add("required");
    label.textContent = q.question;
    div.appendChild(label);

    // media (image/video)
    if (q.media) {
      const mediaWrap = document.createElement("div");
      mediaWrap.className = "question-media";
      if (q.media.type === "image") {
        const img = document.createElement("img");
        img.src = q.media.url;
        img.alt = q.media.alt || "";
        img.className = "question-img";
        mediaWrap.appendChild(img);
      }
      div.appendChild(mediaWrap);
    }

    // input / textarea
    let inputEl;
    switch (q.type) {
      case "textarea":
        inputEl = document.createElement("textarea");
        inputEl.rows = 3;
        break;
      case "email":
      case "tel":
      case "date":
      case "text":
        inputEl = document.createElement("input");
        inputEl.type = q.type;
        break;
      default:
        inputEl = document.createElement("input");
        inputEl.type = "text";
    }

    inputEl.id = `general_${q.id}`;
    inputEl.name = `general_${q.id}`;
    if (q.placeholder) inputEl.placeholder = q.placeholder;
    if (q.required) inputEl.required = true;

    // g√°n s·ª± ki·ªán l∆∞u t·∫°m
    inputEl.addEventListener("input", saveFormData);
    inputEl.addEventListener("change", saveFormData);

    div.appendChild(inputEl);
    container.appendChild(div);
  });
}

/* Helpers: header union */
function getHeadersFromData(arr) {
  const set = new Set();
  arr.forEach((obj) => Object.keys(obj || {}).forEach((k) => set.add(k)));
  return Array.from(set);
}

/* Vertical & Horizontal sheet builders (use union headers for consistency) */
function buildVerticalSheet(apps) {
  if (!apps || apps.length === 0) return XLSX.utils.aoa_to_sheet([[]]);
  const headers = getHeadersFromData(apps);
  return XLSX.utils.json_to_sheet(apps, { header: headers });
}

function buildHorizontalSheet(apps) {
  if (!apps || apps.length === 0) return XLSX.utils.aoa_to_sheet([[]]);
  const headers = getHeadersFromData(apps);
  const rows = headers.map((field) => {
    const row = { Tr∆∞·ªùng: field };
    apps.forEach((app, i) => {
      row[`·ª®ng vi√™n ${i + 1}`] = app[field] ?? "";
    });
    return row;
  });
  const headerRow = ["Tr∆∞·ªùng", ...apps.map((_, i) => `·ª®ng vi√™n ${i + 1}`)];
  return XLSX.utils.json_to_sheet(rows, { header: headerRow });
}

/* Main exporter: prompt for layout, create 'T·ªïng h·ª£p' + per-department sheets (app may appear in both) */
async function exportDataWithLayout(
  filename,
  apps,
  includeByDepartment = false,
  splitPrioritySecondary = false
) {
  if (!apps || apps.length === 0) {
    Swal.fire("Th√¥ng b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t", "info");
    return;
  }

  const { value: mode } = await Swal.fire({
    title: "Ch·ªçn ki·ªÉu xu·∫•t d·ªØ li·ªáu",
    input: "radio",
    inputOptions: { vertical: "H√†ng ngang", horizontal: "H√†ng d·ªçc" },
    inputValidator: (v) => !v && "B·∫°n ph·∫£i ch·ªçn ki·ªÉu xu·∫•t!",
  });
  if (!mode) return;

  const wb = XLSX.utils.book_new();

  // 1) Sheet t·ªïng h·ª£p (lu√¥n c√≥)
  const summaryData = apps.map((a, i) => normalizeApplicationForSummary(a, i));
  const wsAll =
    mode === "vertical"
      ? buildVerticalSheet(summaryData)
      : buildHorizontalSheet(summaryData);
  XLSX.utils.book_append_sheet(wb, wsAll, "T·ªïng h·ª£p");

  // 2) N·∫øu includeByDepartment = true => xu·∫•t m·ªói ban 1 sheet
  if (includeByDepartment) {
    const grouped = {};
    apps.forEach((app, idx) => {
      if (app.priority_position) {
        grouped[app.priority_position] = grouped[app.priority_position] || {
          priority: [],
          secondary: [],
        };
        grouped[app.priority_position].priority.push(
          normalizeApplicationForExport(app, idx)
        );
      }
      if (app.secondary_position && app.secondary_position !== "None") {
        grouped[app.secondary_position] = grouped[app.secondary_position] || {
          priority: [],
          secondary: [],
        };
        grouped[app.secondary_position].secondary.push(
          normalizeApplicationForExport(app, idx)
        );
      }
    });

    Object.keys(grouped).forEach((dept) => {
      const deptName = getDepartmentName(dept);
      const group = grouped[dept];

      if (splitPrioritySecondary) {
        // Xu·∫•t 2 sheet ri√™ng: ∆Øu ti√™n & D·ª± b·ªã
        if (group.priority.length > 0) {
          const wsPri =
            mode === "vertical"
              ? buildVerticalSheet(group.priority)
              : buildHorizontalSheet(group.priority);
          XLSX.utils.book_append_sheet(
            wb,
            wsPri,
            `${deptName}_∆Øu ti√™n`.substring(0, 31)
          );
        }
        if (group.secondary.length > 0) {
          const wsSec =
            mode === "vertical"
              ? buildVerticalSheet(group.secondary)
              : buildHorizontalSheet(group.secondary);
          XLSX.utils.book_append_sheet(
            wb,
            wsSec,
            `${deptName}_D·ª± b·ªã`.substring(0, 31)
          );
        }
      } else {
        // Xu·∫•t g·ªôp chung
        const combined = [...group.priority, ...group.secondary];
        if (combined.length > 0) {
          const ws =
            mode === "vertical"
              ? buildVerticalSheet(combined)
              : buildHorizontalSheet(combined);
          XLSX.utils.book_append_sheet(wb, ws, deptName.substring(0, 31));
        }
      }
    });
  }

  XLSX.writeFile(wb, filename);
}

/* Export wrappers to call the unified exporter */
function exportPersonalInfo() {
  if (userRole === "member") {
    Swal.fire("Kh√¥ng c√≥ quy·ªÅn", "B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t d·ªØ li·ªáu.", "error");
    closeExportModal();
    return;
  }

  let exportApps = applications;

  if (userRole === "admin") {
    exportApps = applications.filter(
      (app) => app.all_departments && app.all_departments.includes(userDept)
    );
  }

  if (!exportApps || exportApps.length === 0) {
    Swal.fire("Th√¥ng b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t", "info");
    closeExportModal();
    return;
  }

  exportDataWithLayout("enactus_thong_tin_ca_nhan.xlsx", exportApps, false);
  closeExportModal();
}

function exportResults() {
  if (userRole === "member") {
    Swal.fire("Kh√¥ng c√≥ quy·ªÅn", "B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t d·ªØ li·ªáu.", "error");
    closeExportModal();
    return;
  }

  let exportApps = applications;
  if (userRole === "admin") {
    exportApps = applications.filter(
      (app) => app.all_departments && app.all_departments.includes(userDept)
    );
  }

  if (!exportApps || exportApps.length === 0) {
    Swal.fire("Th√¥ng b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t", "info");
    closeExportModal();
    return;
  }

  const rows = exportApps.map((app) => {
    // Ban tr√∫ng tuy·ªÉn
    let accepted = [];
    if (app.priorityAccepted)
      accepted.push(getDepartmentName(app.priority_position));
    if (app.secondaryAccepted)
      accepted.push(getDepartmentName(app.secondary_position));
    const acceptedText = accepted.length > 0 ? accepted.join(" / ") : "";

    // Ban b·ªã t·ª´ ch·ªëi
    let rejected = [];
    if (app.priorityRejected)
      rejected.push(getDepartmentName(app.priority_position));
    if (app.secondaryRejected)
      rejected.push(getDepartmentName(app.secondary_position));
    const rejectedText = rejected.length > 0 ? rejected.join(" / ") : "";

    return {
      "H·ªç v√† t√™n": app.fullname ?? "",
      Email: app.email ?? "",
      "S·ªë ƒëi·ªán tho·∫°i": app.phone ?? "",
      "Ban tr√∫ng tuy·ªÉn": acceptedText,
      "Ban b·ªã t·ª´ ch·ªëi": rejectedText,
    };
  });

  const ws = XLSX.utils.json_to_sheet(rows);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "K·∫øt qu·∫£");

  XLSX.writeFile(wb, "enactus_ket_qua_ung_tuyen.xlsx");
  closeExportModal();
}

function getAcceptedDepartments(app) {
  const accepted = [];
  if (app.priorityAccepted) {
    accepted.push(getDepartmentName(app.priority_position));
  }
  if (app.secondaryAccepted) {
    accepted.push(getDepartmentName(app.secondary_position));
  }
  return accepted.length > 0 ? accepted.join(" / ") : "";
}

function exportPersonalWithResults() {
  if (userRole === "member") {
    Swal.fire("Kh√¥ng c√≥ quy·ªÅn", "B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t d·ªØ li·ªáu.", "error");
    closeExportModal();
    return;
  }

  let exportApps = applications;
  if (userRole === "admin") {
    exportApps = applications.filter(
      (app) => app.all_departments && app.all_departments.includes(userDept)
    );
  }

  if (!exportApps || exportApps.length === 0) {
    Swal.fire("Th√¥ng b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t", "info");
    closeExportModal();
    return;
  }

  exportDataWithLayout("enactus_thong_tin_va_ket_qua.xlsx", exportApps, false);
  closeExportModal();
}

async function exportByCandidate() {
  if (!currentApplicationId) {
    Swal.fire(
      "Th√¥ng b√°o",
      "Vui l√≤ng ch·ªçn m·ªôt ·ª©ng vi√™n ƒë·ªÉ xu·∫•t d·ªØ li·ªáu",
      "info"
    );
    closeExportModal();
    return;
  }
  const app = applications.find((a) => a.id === currentApplicationId);
  if (userRole !== "superadmin" && userRole !== "admin") {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t d·ªØ li·ªáu ·ª©ng vi√™n n√†y.",
      "error"
    );
    closeExportModal();
    return;
  }
  // n·∫øu admin, ki·ªÉm tra ban ·ª©ng vi√™n c√≥ kh·ªõp
  if (
    userRole === "admin" &&
    !(app.priority_position === userDept || app.secondary_position === userDept)
  ) {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "B·∫°n ch·ªâ c√≥ th·ªÉ xu·∫•t ·ª©ng vi√™n c·ªßa ban m√¨nh.",
      "error"
    );
    closeExportModal();
    return;
  }
  if (!app) return;

  const { value: mode } = await Swal.fire({
    title: "Ch·ªçn ki·ªÉu xu·∫•t d·ªØ li·ªáu",
    input: "radio",
    inputOptions: {
      vertical: "H√†ng ngang",
      horizontal: "H√†ng d·ªçc",
    },
    inputValidator: (v) => !v && "B·∫°n ph·∫£i ch·ªçn ki·ªÉu xu·∫•t!",
  });
  if (!mode) return;

  const wb = XLSX.utils.book_new();
  const data = [normalizeApplicationForExport(app, 0)];

  const ws =
    mode === "vertical" ? buildVerticalSheet(data) : buildHorizontalSheet(data);

  XLSX.utils.book_append_sheet(wb, ws, app.fullname || "·ª®ng vi√™n");

  XLSX.writeFile(
    wb,
    `enactus_ung_vien_${(app.fullname || "ung_vien").replace(/\s+/g, "_")}.xlsx`
  );
  closeExportModal();
}

function exportAllData() {
  if (userRole !== "superadmin") {
    Swal.fire(
      "Kh√¥ng c√≥ quy·ªÅn",
      "Ch·ªâ Super Admin ƒë∆∞·ª£c xu·∫•t to√†n b·ªô d·ªØ li·ªáu.",
      "error"
    );
    closeExportModal();
    return;
  }
  exportDataWithLayout(
    "enactus_toan_bo_du_lieu.xlsx",
    applications,
    true,
    false
  );
  closeExportModal();
}

// Export l·ªãch ph·ªèng v·∫•n theo template
async function exportInterviewSchedule() {
  try {
    // L·∫•y d·ªØ li·ªáu ·ª©ng vi√™n ph·ªèng v·∫•n
    const interviewApps = applications.filter(
      (app) => app.application_type === "interview"
    );

    if (interviewApps.length === 0) {
      Swal.fire("Th√¥ng b√°o", "Kh√¥ng c√≥ ·ª©ng vi√™n ph·ªèng v·∫•n n√†o", "info");
      return;
    }

    // T·∫°o workbook m·ªõi
    const wb = XLSX.utils.book_new();

    // T·∫°o d·ªØ li·ªáu cho sheet
    const data = [];

    // Header theo template - d√≤ng 2
    const headerRow2 = ["STT", "H·ªç v√† t√™n", "Ban ∆∞u ti√™n", "Ban d·ª± b·ªã"];

    // Th√™m c√°c ca ph·ªèng v·∫•n t·ª´ calendar
    if (interview && interview.length > 0) {
      interview.forEach((day) => {
        day.options.forEach((option) => {
          headerRow2.push(option);
        });
      });
    }

    data.push(headerRow2);

    // Th√™m d·ªØ li·ªáu ·ª©ng vi√™n
    interviewApps.forEach((app, index) => {
      const row = [
        index + 1,
        app.fullname || "",
        getDepartmentName(app.priority_position) || "",
        app.secondary_position && app.secondary_position !== "None"
          ? getDepartmentName(app.secondary_position)
          : "Kh√¥ng c√≥",
      ];

      // Th√™m d·ªØ li·ªáu l·ªãch ph·ªèng v·∫•n ƒë√£ ch·ªçn
      if (interview && interview.length > 0) {
        interview.forEach((day) => {
          const dayData = app[day.id];
          day.options.forEach((option) => {
            // ƒê√°nh d·∫•u X n·∫øu ·ª©ng vi√™n ch·ªçn ca n√†y
            row.push(dayData && dayData.includes(option) ? "X" : "");
          });
        });
      }

      data.push(row);
    });

    // T·∫°o worksheet t·ª´ d·ªØ li·ªáu
    const ws = XLSX.utils.aoa_to_sheet(data);

    // ƒêi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt cho ph√π h·ª£p
    const colWidths = [
      { wch: 5 }, // STT
      { wch: 20 }, // H·ªç v√† t√™n
      { wch: 15 }, // Ban ∆∞u ti√™n
      { wch: 15 }, // Ban d·ª± b·ªã
    ];

    // Th√™m ƒë·ªô r·ªông cho c√°c c·ªôt ca ph·ªèng v·∫•n
    if (interview && interview.length > 0) {
      interview.forEach((day) => {
        day.options.forEach(() => {
          colWidths.push({ wch: 12 });
        });
      });
    }

    ws["!cols"] = colWidths;

    // Th√™m worksheet v√†o workbook
    XLSX.utils.book_append_sheet(wb, ws, "L·ªãch ph·ªèng v·∫•n");

    // Xu·∫•t file
    XLSX.writeFile(wb, "enactus_lich_phong_van.xlsx");

    Swal.fire("Th√†nh c√¥ng", "ƒê√£ xu·∫•t l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng", "success");
  } catch (error) {
    console.error("Error exporting interview schedule:", error);
    Swal.fire(
      "L·ªói",
      "Kh√¥ng th·ªÉ xu·∫•t l·ªãch ph·ªèng v·∫•n: " + error.message,
      "error"
    );
  }
}

// Gi·ªØ l·∫°i fields chung v√† ch·ªâ gi·ªØ ph·∫ßn "∆Øu ti√™n" ho·∫∑c "D·ª± b·ªã" t√πy lo·∫°i
function filterExportData(data, type) {
  const filtered = {};
  Object.keys(data).forEach((key) => {
    const isPriority = key.startsWith("∆Øu ti√™n");
    const isSecondary = key.startsWith("D·ª± b·ªã");

    // Lu√¥n gi·ªØ c√°c tr∆∞·ªùng chung (kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng '∆Øu ti√™n' ho·∫∑c 'D·ª± b·ªã')
    if (!isPriority && !isSecondary) {
      filtered[key] = data[key];
      return;
    }

    // Gi·ªØ ph·∫ßn ri√™ng theo type
    if (type === "priority" && isPriority) {
      filtered[key] = data[key];
    } else if (type === "secondary" && isSecondary) {
      filtered[key] = data[key];
    }
  });
  return filtered;
}

/* Replace export-department listener: safe attach */
(function attachExportDepartmentListener() {
  const el = document.getElementById("export-department");
  if (!el) return;
  try {
    el.replaceWith(el.cloneNode(true));
  } catch (e) {}
  const elem = document.getElementById("export-department");
  if (!elem) return;

  elem.addEventListener("change", async function () {
    let department = this.value;

    // üëâ N·∫øu l√† admin th√¨ lu√¥n export theo ban c·ªßa m√¨nh
    if (userRole === "admin") {
      department = userDept;
    }

    if (!department) return;

    const deptApps = applications.filter(
      (app) => app.all_departments && app.all_departments.includes(department)
    );

    if (deptApps.length === 0) {
      Swal.fire(
        "Th√¥ng b√°o",
        `Kh√¥ng c√≥ ·ª©ng vi√™n n√†o trong ban ${getDepartmentName(department)}`,
        "info"
      );
      return;
    }

    // H·ªèi layout
    const { value: mode } = await Swal.fire({
      title: "Ch·ªçn ki·ªÉu xu·∫•t d·ªØ li·ªáu",
      input: "radio",
      inputOptions: { vertical: "H√†ng ngang", horizontal: "H√†ng d·ªçc" },
      inputValidator: (v) => !v && "B·∫°n ph·∫£i ch·ªçn ki·ªÉu xu·∫•t!",
    });
    if (!mode) return;

    const wb = XLSX.utils.book_new();

    // T√°ch ·ª©ng vi√™n th√†nh 2 nh√≥m: ∆Øu ti√™n & D·ª± b·ªã
    const pri = deptApps
      .filter((app) => app.priority_position === department)
      .map((app, i) =>
        filterExportData(normalizeApplicationForExport(app, i), "priority")
      );
    const sec = deptApps
      .filter((app) => app.secondary_position === department)
      .map((app, i) =>
        filterExportData(normalizeApplicationForExport(app, i), "secondary")
      );

    if (pri.length > 0) {
      const wsPri =
        mode === "vertical"
          ? buildVerticalSheet(pri)
          : buildHorizontalSheet(pri);
      XLSX.utils.book_append_sheet(
        wb,
        wsPri,
        `${getDepartmentName(department)}_∆Øu ti√™n`.substring(0, 31)
      );
    }
    if (sec.length > 0) {
      const wsSec =
        mode === "vertical"
          ? buildVerticalSheet(sec)
          : buildHorizontalSheet(sec);
      XLSX.utils.book_append_sheet(
        wb,
        wsSec,
        `${getDepartmentName(department)}_D·ª± b·ªã`.substring(0, 31)
      );
    }

    XLSX.writeFile(
      wb,
      `enactus_ban_${getDepartmentName(department).replace(/\s+/g, "_")}.xlsx`
    );
    closeExportModal();
  });
})();

/* --------------------- END: Unified answer/export block --------------------- */

// ƒê√≥ng modal khi click b√™n ngo√†i
window.onclick = function (event) {
  const modal = document.getElementById("export-modal");
  if (event.target === modal) {
    closeExportModal();
  }
};

document.addEventListener("click", function (e) {
  if (e.target.closest("#logout-btn")) {
    auth.signOut().then(() => {
      sessionStorage.clear();
      window.location.href = "login.html";
    });
  }
});

// L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi b·ªô l·ªçc
document
  .getElementById("filter-department")
  .addEventListener("change", renderApplications);
document
  .getElementById("filter-status")
  .addEventListener("change", renderApplications);
document
  .getElementById("filter-type")
  .addEventListener("change", renderApplications);
document
  .getElementById("search-input")
  .addEventListener("input", renderApplications);

// T·∫£i ·ª©ng vi√™n khi trang ƒë∆∞·ª£c t·∫£i
//window.addEventListener('load', loadApplications);
